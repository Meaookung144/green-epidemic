generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ReportType {
  COVID19
  FLU
  OTHER
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationChannel {
  LINE
  EMAIL
}

model User {
  id                String              @id @default(cuid())
  email             String?             @unique
  name              String?
  role              Role                @default(USER)
  
  // OAuth providers
  googleId          String?             @unique
  lineId            String?             @unique
  
  // Profile
  profileImage      String?
  homeLatitude      Float?
  homeLongitude     Float?
  homeAddress       String?
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  reports           Report[]
  surveillancePoints SurveillancePoint[]
  accounts          Account[]
  sessions          Session[]
  notifications     Notification[]
  notificationPreferences NotificationPreference[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SurveillancePoint {
  id          String   @id @default(cuid())
  userId      String
  name        String
  latitude    Float
  longitude   Float
  address     String?
  radius      Int      @default(500) // in meters
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Report {
  id          String       @id @default(cuid())
  userId      String
  type        ReportType
  status      ReportStatus @default(PENDING)
  
  // Location data
  latitude    Float
  longitude   Float
  address     String?
  
  // Report details
  title       String
  description String?
  symptoms    String[]
  severity    Int?         @default(1) // 1-5 scale
  
  // Admin review
  approvedBy  String?
  approvedAt  DateTime?
  rejectedBy  String?
  rejectedAt  DateTime?
  adminNotes  String?
  
  // Timestamps
  reportDate  DateTime     @default(now())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]
  
  @@index([userId])
  @@index([latitude, longitude])
  @@index([status])
  @@index([type])
  @@index([reportDate])
}

model Notification {
  id          String              @id @default(cuid())
  userId      String
  reportId    String?
  channel     NotificationChannel
  
  // Notification content
  title       String
  message     String
  data        Json?               // Additional data like coordinates, report details
  
  // Status
  sent        Boolean             @default(false)
  sentAt      DateTime?
  read        Boolean             @default(false)
  readAt      DateTime?
  error       String?
  
  // Timestamps
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  report Report? @relation(fields: [reportId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([reportId])
  @@index([sent])
}

model NotificationPreference {
  id                String              @id @default(cuid())
  userId            String
  channel           NotificationChannel
  
  // Preferences
  enabled           Boolean             @default(true)
  reportTypes       ReportType[]
  minSeverity       Int                 @default(1)
  quietHoursStart   String?             // HH:MM format
  quietHoursEnd     String?             // HH:MM format
  
  // LINE specific
  lineNotifyToken   String?
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, channel])
  @@index([userId])
}

model WeatherData {
  id          String   @id @default(cuid())
  latitude    Float
  longitude   Float
  
  // Weather metrics
  temperature Float?
  humidity    Float?
  pm25        Float?
  pm10        Float?
  aqi         Int?
  windSpeed   Float?
  windDirection Int?
  
  // Source info
  source      String
  airQualitySource String? // Track which API provided air quality data (AQICN, Air4Thai, etc.)
  recordedAt  DateTime
  
  createdAt   DateTime @default(now())
  
  @@index([latitude, longitude])
  @@index([recordedAt])
}

model AIAnalysis {
  id                String   @id @default(cuid())
  title             String   // Brief title of the analysis
  summary           String   @db.Text // Executive summary
  analysis          String   @db.Text // Full analysis content
  recommendations   String   @db.Text // AI recommendations
  severity          String   // LOW, MEDIUM, HIGH, CRITICAL
  confidence        Float    // AI confidence score (0-1)
  
  // Data used for analysis
  weatherDataCount  Int      // Number of weather data points analyzed
  reportsCount      Int      // Number of health reports analyzed
  timeframeStart    DateTime // Start of data timeframe analyzed
  timeframeEnd      DateTime // End of data timeframe analyzed
  
  // Metadata
  generatedBy       String   // AUTO or manual user ID
  model             String   // AI model used (e.g., "deepseek-chat")
  version           String   // Analysis version for tracking improvements
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([createdAt])
  @@index([severity])
  @@index([generatedBy])
}