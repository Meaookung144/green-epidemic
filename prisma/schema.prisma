generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  VOLUNTEER
  DOCTOR
  ADMIN
}

enum ReportType {
  COVID19
  FLU
  OTHER
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationChannel {
  LINE
  EMAIL
}

model User {
  id                String              @id @default(cuid())
  email             String?             @unique
  name              String?
  role              Role                @default(USER)
  
  // OAuth providers
  googleId          String?             @unique
  lineId            String?             @unique
  
  // Integration status
  lineOfficialConnected Boolean         @default(false)
  lineOfficialUserId    String?         @unique
  googleSyncEnabled     Boolean         @default(false)
  
  // Profile
  profileImage      String?
  homeLatitude      Float?
  homeLongitude     Float?
  homeAddress       String?
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  reports           Report[]
  surveillancePoints SurveillancePoint[]
  riskAssessments   RiskAssessment[]
  accounts          Account[]
  sessions          Session[]
  notifications     Notification[]
  notificationPreferences NotificationPreference[]
  
  // Telemedical relations
  patientConsultations TelemedConsultation[] @relation("PatientConsultations")
  doctorConsultations  TelemedConsultation[] @relation("DoctorConsultations")
  aiHealthChats        AIHealthChat[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SurveillancePoint {
  id          String   @id @default(cuid())
  userId      String
  name        String
  latitude    Float
  longitude   Float
  address     String?
  radius      Int      @default(500) // in meters
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Report {
  id          String       @id @default(cuid())
  userId      String
  type        ReportType
  status      ReportStatus @default(PENDING)
  
  // Location data
  latitude    Float
  longitude   Float
  address     String?
  
  // Report details
  title       String
  description String?
  symptoms    String[]
  severity    Int?         @default(1) // 1-5 scale
  
  // Admin review
  approvedBy  String?
  approvedAt  DateTime?
  rejectedBy  String?
  rejectedAt  DateTime?
  adminNotes  String?
  
  // Timestamps
  reportDate  DateTime     @default(now())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]
  
  @@index([userId])
  @@index([latitude, longitude])
  @@index([status])
  @@index([type])
  @@index([reportDate])
}

model Notification {
  id          String              @id @default(cuid())
  userId      String
  reportId    String?
  channel     NotificationChannel
  
  // Notification content
  title       String
  message     String
  data        Json?               // Additional data like coordinates, report details
  
  // Status
  sent        Boolean             @default(false)
  sentAt      DateTime?
  read        Boolean             @default(false)
  readAt      DateTime?
  error       String?
  
  // Timestamps
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  report Report? @relation(fields: [reportId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([reportId])
  @@index([sent])
}

model NotificationPreference {
  id                String              @id @default(cuid())
  userId            String
  channel           NotificationChannel
  
  // Preferences
  enabled           Boolean             @default(true)
  reportTypes       ReportType[]
  minSeverity       Int                 @default(1)
  quietHoursStart   String?             // HH:MM format
  quietHoursEnd     String?             // HH:MM format
  
  // LINE specific
  lineNotifyToken   String?
  lineChannelAccessToken String? // For LINE Official Account messaging
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, channel])
  @@index([userId])
}

model WeatherData {
  id          String   @id @default(cuid())
  latitude    Float
  longitude   Float
  
  // Weather metrics
  temperature Float?
  humidity    Float?
  pm25        Float?
  pm10        Float?
  aqi         Int?
  windSpeed   Float?
  windDirection Int?
  
  // Source info
  source      String
  airQualitySource String? // Track which API provided air quality data (AQICN, Air4Thai, etc.)
  stationName String? // Name of the air quality station
  stationId   String? // Station identifier
  recordedAt  DateTime
  
  createdAt   DateTime @default(now())
  
  @@index([latitude, longitude])
  @@index([recordedAt])
  @@index([stationId])
}

model AIAnalysis {
  id                String   @id @default(cuid())
  title             String   // Brief title of the analysis
  summary           String   @db.Text // Executive summary
  analysis          String   @db.Text // Full analysis content
  recommendations   String   @db.Text // AI recommendations
  severity          String   // LOW, MEDIUM, HIGH, CRITICAL
  confidence        Float    // AI confidence score (0-1)
  
  // Data used for analysis
  weatherDataCount  Int      // Number of weather data points analyzed
  reportsCount      Int      // Number of health reports analyzed
  timeframeStart    DateTime // Start of data timeframe analyzed
  timeframeEnd      DateTime // End of data timeframe analyzed
  
  // Metadata
  generatedBy       String   // AUTO or manual user ID
  model             String   // AI model used (e.g., "deepseek-chat")
  version           String   // Analysis version for tracking improvements
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([createdAt])
  @@index([severity])
  @@index([generatedBy])
}

model RiskAssessment {
  id              String   @id @default(cuid())
  
  // User information
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  
  // Patient information
  patientName     String
  patientAge      Int
  patientGender   String
  patientPhone    String?
  
  // Primary symptoms
  primarySymptoms String[] // Array of symptoms
  severity        Int      // 1-5 scale
  duration        String   // How long symptoms have lasted
  
  // Risk assessment results
  riskLevel       String   // LOW, MEDIUM, HIGH, CRITICAL
  priority        String   // ROUTINE, URGENT, EMERGENCY
  
  // Triage recommendation
  recommendation  String   // SELF_CARE, TELEHEALTH, CLINIC_VISIT, EMERGENCY
  notes           String?  // Additional notes
  
  // Telemedical consultation
  doctorConsultation Boolean @default(false)
  doctorNotes        String?
  doctorRecommendation String?
  consultationDate   DateTime?
  
  // Assessment metadata
  assessedBy      String   // User ID of person conducting assessment
  location        String?  // Location where assessment was conducted
  latitude        Float?
  longitude       Float?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  telemedConsultation TelemedConsultation?
  
  @@index([riskLevel])
  @@index([priority])
  @@index([createdAt])
  @@index([assessedBy])
}

enum ConsultationStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model TelemedConsultation {
  id              String   @id @default(cuid())
  
  // Risk Assessment relation
  riskAssessmentId String  @unique
  riskAssessment   RiskAssessment @relation(fields: [riskAssessmentId], references: [id], onDelete: Cascade)
  
  // Patient and Doctor
  patientId       String
  patient         User     @relation("PatientConsultations", fields: [patientId], references: [id])
  doctorId        String?
  doctor          User?    @relation("DoctorConsultations", fields: [doctorId], references: [id])
  
  // Consultation details
  status          ConsultationStatus @default(PENDING)
  scheduledAt     DateTime?
  startedAt       DateTime?
  endedAt         DateTime?
  duration        Int?     // Duration in minutes
  
  // Video call details
  roomId          String?  // Video call room ID
  callUrl         String?  // Video call URL
  
  // Consultation notes
  chiefComplaint  String?  // Main reason for consultation
  doctorNotes     String?
  diagnosis       String?
  prescription    String?
  followUpNotes   String?
  followUpDate    DateTime?
  
  // AI Chat history
  aiChatHistory   Json?    // Stores AI chat conversation
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@index([scheduledAt])
}

model AIHealthChat {
  id              String   @id @default(cuid())
  
  // User information
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Chat session
  sessionId       String   // To group related messages
  messages        Json     // Array of chat messages
  
  // AI Analysis results
  suggestedSymptoms String[] // AI suggested symptoms
  riskLevel       String?   // AI assessed risk level
  recommendation  String?   // AI recommendation
  shouldConsultDoctor Boolean @default(false)
  
  // Additional information collection
  needsMoreInfo   Boolean @default(false) // Whether AI needs more patient info
  missingInfo     String[] // Array of missing information types
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
  @@index([shouldConsultDoctor])
  @@index([needsMoreInfo])
}

model BulkHealthStatistic {
  id                String   @id @default(cuid())
  
  // Location information
  province          String
  district          String?
  subdistrict       String?
  postcode          String?
  latitude          Float?
  longitude         Float?
  
  // Health statistics
  diseaseType       String   // Type of disease/illness
  caseCount         Int      // Number of sick people
  populationCount   Int?     // Total population in area (optional)
  severity          String?  // LOW, MEDIUM, HIGH, CRITICAL
  ageGroup          String?  // e.g., "0-10", "11-20", "21-30", etc.
  gender            String?  // MALE, FEMALE, ALL
  
  // Time period
  reportDate        DateTime // Date this statistic represents
  periodType        String   @default("DAILY") // DAILY, WEEKLY, MONTHLY
  
  // Source information
  sourceType        String   // MANUAL, CSV_IMPORT, API_IMPORT
  sourceReference   String?  // Reference to source document/file
  reportedBy        String   // Admin user ID who added this data
  
  // Metadata
  notes             String?  // Additional notes
  verified          Boolean  @default(false) // Whether data has been verified
  verifiedBy        String?  // Admin who verified the data
  verifiedAt        DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([province])
  @@index([district])
  @@index([postcode])
  @@index([diseaseType])
  @@index([reportDate])
  @@index([severity])
  @@index([reportedBy])
}

model Hotspot {
  id            String   @id @default(cuid())
  
  // Location data
  latitude      Float
  longitude     Float
  
  // NASA FIRMS data
  brightness    Float?   // Brightness temperature (Kelvin)
  scan          Float?   // Along scan pixel size
  track         Float?   // Along track pixel size
  acquisitionDate DateTime // Date/time of satellite pass
  acquisitionTime String // Time of satellite pass (HHMM format)
  satellite     String   // Satellite name (e.g., "Terra", "Aqua", "SUOMI_NPP")
  instrument    String   // Instrument name (e.g., "MODIS", "VIIRS")
  confidence    Int?     // Detection confidence (0-100)
  version       String?  // Collection version
  brightT31     Float?   // Brightness temperature band 31
  frp           Float?   // Fire Radiative Power (MW)
  daynight      String?  // D=day, N=night
  
  // Additional fields
  type          String?  // Fire type classification if available
  source        String   @default("NASA_FIRMS") // Data source
  
  // Metadata
  isActive      Boolean  @default(true) // Whether this hotspot is still active
  lastSeen      DateTime? // Last time this hotspot was detected
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([latitude, longitude])
  @@index([acquisitionDate])
  @@index([satellite])
  @@index([confidence])
  @@index([isActive])
}